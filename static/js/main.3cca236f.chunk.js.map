{"version":3,"sources":["components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","className","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","smartIndent","App","useState","html","setHtml","css","setCss","javascript","setJavaScript","scrDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","title","sandbox","srcDoc","width","height","frameBorder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAoCeA,EA5BA,SAACC,GAAW,IAClBC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAKtC,OACC,yBAAKC,UAAU,oBACd,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,iBAAf,IAAiCH,EAAjC,MAED,kBAAC,aAAD,CACCI,eATkB,SAACC,EAAQC,EAAML,GACnCC,EAASD,IASPA,MAAOA,EACPE,UAAU,sBACVI,QAAS,CACRC,cAAc,EACdC,MAAM,EACNC,KAAMX,EACNY,MAAO,WACQC,aAAa,EACbC,aAAa,OCsBlBC,MA/Cf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAESF,mBAAS,IAFlB,mBAENG,EAFM,KAEDC,EAFC,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAIeN,mBAAS,IAJxB,mBAINO,EAJM,KAIEC,EAJF,KA0Bb,OApBAC,qBAAU,WAER,IAAMC,EAAUC,YAAW,WACzBH,EAAU,oDAAD,OAGIL,EAHJ,gEAMHF,EANG,+BAOKI,EAPL,iEAYP,KAEJ,OAAO,WAAQO,aAAaF,MAE3B,CAACT,EAAME,EAAKE,IAEb,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,mBACX,kBAAC,EAAD,CAAQJ,SAAS,MAAMC,YAAY,OAAOC,MAAOe,EAAMd,SAAUe,IACjE,kBAAC,EAAD,CAAQlB,SAAS,MAAMC,YAAY,MAAMC,MAAOiB,EAAKhB,SAAUiB,IAC/D,kBAAC,EAAD,CAAQpB,SAAS,aAAaC,YAAY,KAAKC,MAAOmB,EAAYlB,SAAUmB,KAEhF,yBAAKlB,UAAU,oBACX,4BACEyB,MAAM,cACNC,QAAQ,gBACRC,OAAQR,EACRS,MAAM,OACNC,OAAO,OACPC,YAAY,SChCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3cca236f.chunk.js","sourcesContent":["import React from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/css/css';\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\n\nconst Editor = (props) => {\n\tconst { language, displayName, value, onChange } = props;\n\n\tconst handleChange = (editor, data, value) => {\n\t\tonChange(value);\n\t};\n\treturn (\n\t\t<div className='editor-container'>\n\t\t\t<div className='editor__header'>\n\t\t\t\t<div className='editor__title'> {displayName} </div>\n\t\t\t</div>\n\t\t\t<ControlledEditor\n\t\t\t\tonBeforeChange={handleChange}\n\t\t\t\tvalue={value}\n\t\t\t\tclassName='code-mirror-wrapper'\n\t\t\t\toptions={{\n\t\t\t\t\tlineWrapping: true,\n\t\t\t\t\tlint: true,\n\t\t\t\t\tmode: language,\n\t\t\t\t\ttheme: 'material',\n                    lineNumbers: true,\n                    smartIndent: true\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Editor;\n","import React,  {useState, useEffect} from 'react';\nimport './App.css';\nimport Editor from './components/Editor';\n\nfunction App() {\n  const [html, setHtml] = useState('')\n  const [css, setCss] = useState('')\n  const [javascript, setJavaScript] = useState('')\n  const [scrDoc, setSrcDoc] = useState('')\n\n  useEffect(() => {\n\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n      <html>\n        <head>\n          <style>${css}</style>\n        </head>\n        <body>\n          ${html}\n          <script>${javascript}</script>\n        </body>\n      </html>\n      \n      `)\n    } , 250)\n\n    return () => { clearTimeout(timeout) }\n    \n  }, [html, css, javascript])\n  return (\n    <div className=\"app\">\n      <div className=\"editors-wrapper\">\n          <Editor language='xml' displayName=\"HTML\" value={html} onChange={setHtml} />\n          <Editor language='css' displayName=\"CSS\" value={css} onChange={setCss} />\n          <Editor language='javascript' displayName=\"JS\" value={javascript} onChange={setJavaScript} />\n      </div>\n      <div className=\"output-container\"> \n          <iframe\n            title=\"code-mirror\"\n            sandbox=\"allow-scripts\"\n            srcDoc={scrDoc}\n            width=\"100%\"\n            height=\"100%\"\n            frameBorder=\"0\"\n          />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}